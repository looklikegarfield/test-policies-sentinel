# This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "tfplan/v2" as tfplan

# List of mandatory labels
mandatory_labels = ["terraform", "env"]

# Get all GCE compute instances
allGCEInstances = plan.find_resources("google_compute_instance", "google_dataproc_cluster", "google_storage_bucket")

# Filter to GCE compute instances with violations
# Warnings will be printed for all violations since the last parameter is true
violatingGCEInstances = plan.filter_attribute_not_contains_list(allGCEInstances,
                        "labels", mandatory_labels, true)

# Main rule
main = rule {
  length(violatingGCEInstances["messages"]) is 0
}



#get_resources_all_modules = func(type) {
# resources = []
# for tfplan.module_paths as path {
#  named_and_counted_resources = tfplan.module(path).resources[type] else {}
#  for named_and_counted_resources as _, instances {
#   for instances as _, body {
#    append(resources, body)
#   }
#  }
# }
# return resources
#}
#
## List of mandatory labels
#mandatory_labels = ["terraform", "env"]
#
## Get all GCE compute instances
#allGCEInstances = plan.find_resources("*")
#
## Filter to GCE compute instances with violations
## Warnings will be printed for all violations since the last parameter is true
#violatingGCEInstances = plan.filter_attribute_not_contains_list(allGCEInstances,
#                        "labels", mandatory_labels, true)
#
## Main rule
#main = rule {
#  length(violatingGCEInstances["messages"]) is 0
#}
